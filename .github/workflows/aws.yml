name: Production ECS Deployment

on:
  push:
    branches:
      - "hotfix/ransom"
    paths:
      - "spm_backend/**"
      - ".github/workflow/aws.yaml"
  pull_request:
    branches:
      - hotfix/ransom
    paths:
      - "spm_backend/**"
      - ".github/workflow/aws.yaml"

env:
  AWS_REGION: ap-southeast-1 # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: public.ecr.aws/o9x6w5p2/spm-backend-final
  ECS_SERVICE: spm-backend-service-final # set this to your Amazon ECS service name
  ECS_CLUSTER:
    spm-cluster-final # set this to your Amazon ECS cluster name
    # file, e.g. .aws/task-definition.json
  CONTAINER_NAME:
     spm-backend-final
     # set this to the name of the container in the
    # containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          IMAGE_TAG: latest
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          cd spm_backend
          
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/s3u0s3j5

          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REPOSITORY:$IMAGE_TAG"
          
        
         
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment
          # aws ecs update-service --cluster plantngo-cluster-t2-medium --service plantngo-service-t2-medium --force-new-deployment
